version: "3.4"

services:
#--------------------------------------------------------------------------------------------------
# Apache + PHP
  webserver:
    build: 
      context: ./containers/${PHP_FOLDER}
    container_name: '${PROJECT_BASENAME}-${PHP_FOLDER}'
    restart: 'always'
    ports:
      - "${HOST_MACHINE_HTTP_PORT}:80"
      - "${HOST_MACHINE_HTTPS_PORT}:443"
    links: 
      - mysql
    volumes: 
      - ${DOCUMENT_ROOT-./data/www/html}:/var/www/html
      - ${PHP_INI-./config/php/php.ini}:/usr/local/etc/php/php.ini
      - ${VHOSTS_DIR-./config/vhosts/}:/etc/apache2/sites-enabled
      - ${LOG_DIR-./logs/apache2}:/var/log/apache2
    environment:
      PMA_PORT: ${HOST_MACHINE_PMA_PORT}

#--------------------------------------------------------------------------------------------------
# Mysql database
  mysql:
    build:
      context: "./containers/${MYSQL_FOLDER}"
    container_name: '${PROJECT_BASENAME}-${MYSQL_FOLDER}'
    restart: 'always'
    ports:
      - "127.0.0.1:${HOST_MACHINE_MYSQL_PORT}:3306"
    volumes: 
      - ${MYSQL_DATA_DIR-./data/mysql}:/var/lib/mysql
      - ${MYSQL_LOG_DIR-./logs/mysql}:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

#--------------------------------------------------------------------------------------------------
# Midnight commander + openSSH
  midnight-commander:
    build:
      context: "./containers/${MC_FOLDER}"
    container_name: '${PROJECT_BASENAME}-mc'
    restart: unless-stopped
    #links: 
     # - webserver
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - SYS_CHROOT
    ports:
      - 2222:2222/tcp
    # Some examples of environment variables. See Dockerfile for more information.
    environment:
      MC_SUPPLEMENTARY_GIDS: "12345 12346"
      MC_AUTHORIZED_KEYS: | 
        ssh-rsa AAAA... me@machine
        ssh-rsa AAAA... you@machine
    #  TERM: "/usr/bin/bash"
    # Docker-compose offers a mechanism for passwords called "secrets", but it requires
    # compose file version 3.1. Alternatively, mount the secrets file manually.
    # secrets:
    #   - mc_password
    volumes:
      - ./data/etc/ssh/:/etc/ssh/
      - ./data/www/html/:/var/www/html/
      - ./data/ssh-default:/etc/ssh-default/

      # You can mount multiple sources by using e.g. /data/data1, /data/data2 as mountpoints.
      - /mnt/my-arbitrary-data-dir:/data 
      # If not using docker-compose for secrets, mount a file containing the password manually.
      # - ./secrets/mc_password:/run/secrets/mc_password:ro

# secrets:
#   mc_password:
#     # Put the password in this file without anything else.
#     file: ./secrets/mc_password

# volumes:
  # This volume will contain server keys and configuration
#  midnight-commander: {}

